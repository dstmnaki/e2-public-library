#[
    flareCreate() by [DSTM] Naki
    
    creates a "flare" and returns parent entity and light entity in a table
    
    required functions
    
    entity=propSpawn(string mdl path, angle angle, number frozen)
    entity:setAlpha(number)
    entity:setPos(vector)
    noCollideAll(entity,number) or entity:setNoCollideAll() or entity:setNoCollideAll(number)
    lightCreate(number index,vector position,vector color,number distance,number brightness)
    lightParent(index,entity)
    
    copy function below!
    flareCreate(number index, vector position, vector color, number distance, number brightness, vector velocity, number nocollide)
    flareCreate(number index, vector position, vector color, number distance, number brightness, vector velocity)
    flareCreate(number index, vector position, vector color, number distance, number brightness, number nocollide)
    flareCreate(number index, vector position, vector color, number distance, number brightness)
]#

function table flareCreate(Index,Pos:vector,Color:vector,Distance,Brightness,Velocity:vector,Nocollide){
    #ifdef lightCreate(number,vector,vector,number,number)
        if(propCanCreate()&(lightRemainingSpawns()>0)){
            Ent=propSpawn("models/hunter/plates/plate.mdl",ang(),0)
            Ent:setAlpha(0)
            Ent:setPos(Pos)
            if(Nocollide){
                #ifdef noCollideAll(entity,number)
                    noCollideAll(Ent,1)
                #endif
                #ifdef entity:setNoCollideAll()
                    Ent:setNoCollideAll()
                #endif
                #ifdef entity:setNoCollideAll(number)
                    Ent:setNoCollideAll(1)
                #endif
            }
            lightCreate(Index,Ent:pos(),Color,Distance,Brightness)
            lightParent(Index,Ent)
            Ent:propSetVelocity(Velocity)
        }
        return table(Ent:isValid() ? Ent : noentity(),lightEntity(Index):isValid() ? lightEntity(Index) : noentity())
    #else
        print("lightCreate() function not found, [E2] light core possibly not installed!")
        return table(noentity(),noentity())
    #endif
}

function table flareCreate(Index,Pos:vector,Color:vector,Distance,Brightness,Nocollide){
    #ifdef lightCreate(number,vector,vector,number,number)
        if(propCanCreate()&(lightRemainingSpawns()>0)){
            Ent=propSpawn("models/hunter/plates/plate.mdl",ang(),0)
            Ent:setAlpha(0)
            Ent:setPos(Pos)
            if(Nocollide){
                #ifdef noCollideAll(entity,number)
                    noCollideAll(Ent,1)
                #endif
                #ifdef entity:setNoCollideAll()
                    Ent:setNoCollideAll()
                #endif
                #ifdef entity:setNoCollideAll(number)
                    Ent:setNoCollideAll(1)
                #endif
            }
            lightCreate(Index,Ent:pos(),Color,Distance,Brightness)
            lightParent(Index,Ent)
        }
        return table(Ent:isValid() ? Ent : noentity(),lightEntity(Index):isValid() ? lightEntity(Index) : noentity())
    #else
        print("lightCreate() function not found, [E2] light core possibly not installed!")
        return table(noentity(),noentity())
    #endif
}


function table flareCreate(Index,Pos:vector,Color:vector,Distance,Brightness,Velocity:vector){
    #ifdef lightCreate(number,vector,vector,number,number)
        if(propCanCreate()&(lightRemainingSpawns()>0)){
            Ent=propSpawn("models/hunter/plates/plate.mdl",ang(),0)
            Ent:setAlpha(0)
            Ent:setPos(Pos)
            lightCreate(Index,Ent:pos(),Color,Distance,Brightness)
            lightParent(Index,Ent)
            Ent:propSetVelocity(Velocity)
        }
        return table(Ent:isValid() ? Ent : noentity(),lightEntity(Index):isValid() ? lightEntity(Index) : noentity())
    #else
        print("lightCreate() function not found, [E2] light core possibly not installed!")
        return table(noentity(),noentity())
    #endif
}

function table flareCreate(Index,Pos:vector,Color:vector,Distance,Brightness){
    #ifdef lightCreate(number,vector,vector,number,number)
        if(propCanCreate()&(lightRemainingSpawns()>0)){
            Ent=propSpawn("models/hunter/plates/plate.mdl",ang(),0)
            Ent:setAlpha(0)
            Ent:setPos(Pos)
            lightCreate(Index,Ent:pos(),Color,Distance,Brightness)
            lightParent(Index,Ent)
        }
        return table(Ent:isValid() ? Ent : noentity(),lightEntity(Index):isValid() ? lightEntity(Index) : noentity())
    #else
        print("lightCreate() function not found, [E2] light core possibly not installed!")
        return table(noentity(),noentity())
    #endif
}
